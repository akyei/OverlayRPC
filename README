-----------------------------------------------------------
  ___                 _               ____  ____   ____ 
 / _ \__   _____ _ __| | __ _ _   _  |  _ \|  _ \ / ___|
| | | \ \ / / _ \ '__| |/ _` | | | | | |_) | |_) | |    
| |_| |\ V /  __/ |  | | (_| | |_| | |  _ <|  __/| |___ 
 \___/  \_/ \___|_|  |_|\__,_|\__, | |_| \_\_|    \____|
                              |___/                     
-----------------------------------------------------------
Alexander Kyei
Daniel McLaughlin
David Sanvar

------------
Introduction
------------
This README is the for our Part 2 Submission. Thus far we have
implemented circuit routing, as well as a security extension.

The messages that are available are as follows:

SENDMSG - Sends a message from 1 node to another
TRACEROUTE - Traces the route that a message would take, through
	     the network
PING - Sends a short message to a node, and waits for a response.
ENC - Sends an encrypted message to the target node using 2048-bit
      RSA Encryption

While running the client, you can type the command, help for more
information.

-------------------
Running the Program
-------------------
Before trying to execute this program, be sure that you are in the
the appropriate directory. You can achieve this by running "cd" and
specificying the path in which the executable node.rb can be found.
To run the program, execute the command "ruby node.rb <config file>".
Alternatively, you can run ./node.rb <config file>. The config file must
follow a certain which will be described in the next section.

The program will not run correctly without a proper config file.

-------------------
Configuration File
-------------------
We have included an example config file in our zipfile.
The configuration file must be a single line in the following format.
<Maximum Packet Size>,<WeightFile>,<RoutingUpdateInterval>,<RoutingTableFile>,<DumpInterval>,

BE SURE TO INCLUDE A COMMA AT THE END OF THE CONFIG FILE.
As mentioned before the file node.rb is a shell script that
will execute the server and give control to the client. It might
be neccesary to run chmod a+x node.rb before execution.

The routing tables will be dumped in the file you specified appended with the string "$HOSTNAME.dump"
In our example config file, the dump files were named /tmp/n*.dump where * is the number of the node.


---------------------
Testing the Program
---------------------
To Test the program, simply run node.rb with a specified configuration
file on each of the nodes. Make sure to run gen_weights before hand in
order to make sure that the nodes are getting dynamic information.

In our test cases, we have run the program "ruby node.rb config.txt" on
each node. This brought us to the client's command interface and then we began sending messages.
If you are able to execute the above command simultaneously, you might not see the client shell.
You can start another instance of the client by running "ruby client.rb -m [Packet Size]".

--------
Usage
--------
When the client comes up, you will be met with a loading bar. This loading
bar is there so that the network converges properly. Once loading has finished.
You will be met with a command window where you can enter a variety of commands.
Commands are not case sensitive

SENDMSG <node | ip address> <MSG>
TRACEROUTE <node | ip address>
PING <node | ip address> <Number of Pings> <Delay>
ENC <node | ip address> <MSG>
help

SENDMSG will send a message to a node, and will tell you whether or not the message was succesful, then let you enter another command.

TRACEROUTE will print the order of nodes visited as a message passes through the network

PING will send a specified amount, n, pings to the receiving node. Should the node responds within 5 seconds,
the client will print RESPONSE-PING from <host> -- if not, an error message will be printed.

ENC will send an encrypted message to the destination node. Currently, if it is impossible for the message to be delivered,
the client will print an error. When message delivery is succesful,the client will tell you that the message was sent succesfully.
Sometimes, the recipient will send a malformed acknowledgment, even though it has receieved the message.


-----------------
Miscellaneous
-----------------
The Server runs from graph.rb
graph.rb

Usage: graph.rb -w [filename] -r [filename] -d [dump interval] -q [Protocol Interval] -m  [Max packet length]
    -w, --weightfile weightfile      Weight Input File
    -r, --routefile routefile        Route Output File
    -d, --dump interval(seconds)     How often the routing information is sent to a text file
    -q, --routetime time(seconds)    How often the routing protocol is run
    -m, --maxlength length(bytes)    Maximum Packet Length in bytes
    -h, --help                       Display Help

Link state packets are sent through sendLSP.rb
sendLSP.rb

Usage: sendLSP.rb [options]
    -f, --file file                  WeightFile
    -d, --delay delay                Specifies how often to send packets (seconds)
    -l, --length length              Specifies maximum packet length (bytes)
    -t, --time time                  Specifies the delay until first LSP is sent
    -h, --help                       Display Help


The client is run through client.rb
client.rb

Usage: node.rb -m [maxlength]
    -m, --maxlength length           Maxmimum PacketLength
    -d, --delay delay                Initial routing delay [NOT USED]

---------------------
Future Extensions 
--------------------

If you get this far into our README, Please give us feedback, because these extensions
were not originally apart of our design spec. If you think that they are a bad idea,
please send an email to drakeling@gmail.com, akyei@umd.edu or dsanvar@terpmail.umd.edu. 

Encrypted Text Transport -  Transport Encrypted Text files between two end nodes,  

Password Protected Mode - The client can force the server into a password mode, 
forcing all other clients who wish to send to the server to enter a password.

Encrypted Chat Mode - Engage in an encrypted chat with a node with consent. For an added layer of security, client can initiate Password Mode before starting an Encrypted Chat.

Adversarial Routing - Avoid black hole attacks by only acknowledging LSPs within a certain range.
We probably will leave this for last since it is more complicated that the others.


